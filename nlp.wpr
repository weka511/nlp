#!wing
#!version=7.0
##################################################################
# Wing project file                                              #
##################################################################
[project attributes]
proj.file-list = [loc('64317-0.txt'),
                  loc('bt.py'),
                  loc('chapter1.txt'),
                  loc('plot.py'),
                  loc('README.md'),
                  loc('rnn2.py'),
                  loc('rnn.py'),
                  loc('seq2seq.py'),
                  loc('tokenizer.py'),
                  loc('word2vec.py')]
proj.file-type = 'normal'
proj.launch-config = {loc('plot.py'): ('project',
                                       (u'gatsby[0-9].pt --show --chain',
        '')),
                      loc('rnn3.py'): ('project',
                                       (u'train --output simple --decoder simple --show',
        '')),
                      loc('seq2seq.py'): ('project',
        (u'evaluate  --load attention',
         '')),
                      loc('word2vec.py'): ('project',
        (u'test --saved foo',
         ''))}
[user attributes]
debug.recent-run-args = {loc('plot.py'): [u'gatsby[0-9].pt --show --chain',
        u'gatsby2.pt --show --chain',
        u'gatsby*.pt --show --chain',
        u'gatsby*.pt --show',
        u'gatsby[0-9]*.pt --show',
        u'gatsby2.pt gatsby3.pt --show',
        u'gatsby2.pt gatasby3.pt --show',
        u'gatsby2.pt --show',
        u'gatsby1.pt --show',
        u'foo bar baz --show',
        u'foo bar baz'],
                         loc('rnn3.py'): [u'train --output simple --decoder simple --show',
        u'train --output simple --decoder --simple --show',
        u'evaluate --load persist --show',
        u'evaluate --load foo',
        u'train --output foo --N 1000 ',
        u'evaluate',
        u'train --N 1000 --printf 10 --frequency 10 --output foo --show',
        u'--help',
        u'--N 750 --printf 50 --frequency 5 --output temp --show',
        u'--N 750 --printf 50 --frequency -5 --output temp --show',
        u'--N 750 --printf 50 --frequency -5',
        u'--N 750 --printf 50 --frequency -5  --decoder simple',
        u'--N 750 --printf 50 --frequency -5  decoder simple',
        u'--N 750 --Frequency 50 --Plot -5'],
                         loc('seq2seq.py'): [u'evaluate  --load attention',
        u'evaluate --decoder attention --load foo',
        u'train --decoder attention --output bar',
        u'train --decoder simple --output foo',
        u'train --decoder attention --output foo',
        u'--decoder attention',
        u'--help'],
                         loc('word2vec.py'): [u'test --saved foo',
        u'test --saved mply000239',
        u'test --saved bar',
        u'train --corpus nano-corpus.txt  --freq 100 --output stochastic --show --embedding 5 --N 200  --optimizer stochastic',
        u'train --corpus nano-corpus.txt  --freq 100 --output stochastic --show --embedding 5 --N 20000  --optimizer stochastic',
        u'train --corpus nano-corpus.txt  --freq 100 --output gradient --show --embedding 5 --N 5000  --optimizer gradient',
        u'train --corpus nano-corpus.txt  --freq 100 --output alpha --show --embedding 5 --N 5000  --optimizer stochastic --minibatch 25',
        u'train --corpus nano-corpus.txt  --freq 100 --output alpha --show --embedding 5 --N 5000  --optimzer stochastic --minibatch 25',
        u'train --corpus nano-corpus.txt  --freq 100 --output alpha --show --embedding 5 --N 5000  ',
        u'train --corpus nano-corpus.txt  --freq 100 --output alpha --show --embedding 5 --N 50000  ',
        u'train --corpus nano-corpus.txt  --freq 100 --output alpha --show --embedding 5 --N 50000  --alpha 0.5',
        u'train --corpus nano-corpus.txt  --freq 100 --output alpha --show --embedding 5 --N 2000  --alpha 0.5',
        u'train --corpus nano-corpus.txt  --freq 100 --output nano --show --embedding 5 --N 50000',
        u'train --corpus nano-corpus.txt  --freq 100 --output nano --show --embedding 5',
        u'train --corpus nano-corpus.txt  --freq 100 --output nano --shown --embedding 5',
        u'train --corpus nano-corpus.txt  --freq 100 --output nano --shown--embedding 5',
        u'train --corpus nano-corpus.txt  --freq 100 --output nano --show',
        u'train --corpus nano-corpus.txt --N 100 --freq 10 --output nano --show',
        u'train --corpus nano-corpus.txt --N 10 --freq 10 --output nano --show',
        u'train --corpus nano.txt --N 100 --freq 10 --output nano --show',
        u'train --corpus nano --N 100 --freq 10 --output nano --show',
        u'test --saved nano',
        u'train --corpus nano-corpus.txt --output nano  --embedding 5 --frequency 100',
        u'train --corpus nano-corpus.txt --output nano  --embedding 5',
        u'train --corpus nano-corpus.txt --output nano  --e,bedding 5',
        u'train --corpus nano-corpus.txt --output nano',
        u'--help',
        u'test --saved chk000082',
        u'train --corpus chapter1.txt --output foo',
        u'test --saved ZZZ000004']}
edit.file-encoding = {loc('chapter1.txt'): 'utf_8',
                      loc('rnn.py'): 'utf_8'}
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'zRuoo7lo1K5bGtfhUhOsW4cZwV'\
        '1Zxhqw',
        'size-state': 'maximized',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [2],
                 'full-screen': False,
                 'notebook_display': 'normal',
                 'notebook_percent': 0.25,
                 'override_title': None,
                 'pagelist': [('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'expanded-nodes': [],
                                 'selected-nodes': [(7,)],
                                 'top-node': (0,)}},
        'tree-style': 'deep'}}),
                              ('source-assistant',
                               'tall',
                               2,
                               {}),
                              ('debug-stack',
                               'tall',
                               1,
                               {'codeline-mode': 'below'}),
                              ('browser',
                               'tall',
                               0,
                               {'all_tree_states': {loc('../../../Program Files (x86)/Wing Personal 7.2/resources/builtin-pi-files/__os__/win32/3.8/builtins.pi'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../../Program Files (x86)/Wing Personal 7.2/resources/builtin-pi-files/__os__/win32/3.8/builtins.pi'),
                      'abs')]},
        loc('../../../Program Files (x86)/Wing Personal 7.2/resources/typeshed/stdlib/3/os/__init__.pyi'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [[('class def',
                             loc('../../../Program Files (x86)/Wing Personal 7.2/resources/typeshed/stdlib/3/os/__init__.pyi'),
                             '_wrap_close')]],
        'top-node': [('function def',
                      loc('../../../Program Files (x86)/Wing Personal 7.2/resources/typeshed/stdlib/3/os/__init__.pyi'),
                      'abort')]},
        loc('../../../Program Files (x86)/Wing Personal 7.2/resources/typeshed/stdlib/3/random.pyi'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [[('generic attribute',
                             loc('../../../Program Files (x86)/Wing Personal 7.2/resources/typeshed/stdlib/3/random.pyi'),
                             '_T')]],
        'top-node': [('function def',
                      loc('../../../Program Files (x86)/Wing Personal 7.2/resources/typeshed/stdlib/3/random.pyi'),
                      'betavariate')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/argparse.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [[('generic attribute',
                             loc('../AppData/Local/Programs/Python/Python38/Lib/argparse.py'),
                             '__version__')]],
        'top-node': [('class def',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/argparse.py'),
                      'Action')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/encodings/cp1252.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [[('class def',
                             loc('../AppData/Local/Programs/Python/Python38/Lib/encodings/cp1252.py'),
                             'StreamWriter')]],
        'top-node': [('class def',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/encodings/cp1252.py'),
                      'Codec')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/glob.py'): {'expa'\
        'nded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/glob.py'),
                      'escape')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/inspect.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [[('generic attribute',
                             loc('../AppData/Local/Programs/Python/Python38/Lib/inspect.py'),
                             '__author__')]],
        'top-node': [('generic attribute',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/inspect.py'),
                      'ArgInfo')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/ntpath.py'): {'ex'\
        'panded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/ntpath.py'),
                      'abspath')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/random.py'): {'ex'\
        'panded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../../Program Files (x86)/Wing Personal 7.2/resources/typeshed/stdlib/3/random.pyi'),
                      'betavariate')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/PIL/Image.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/PIL/Image.py'),
                      'ADAPTIVE')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/PIL/ImageFile.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/PIL/ImageFile.py'),
                      'ERRORS')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/hpacellseg/cellsegmentator.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/hpacellseg/cellsegmentator.py'),
                      'CellSegmentator')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/hpacellseg/utils.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/hpacellseg/utils.py'),
                      'download_with_url')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/imageio/core/request.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/imageio/core/request.py'),
                      'EXAMPLE_IMAGES')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/__init__.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/afm.py'),
                      '')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/artist.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/artist.py'),
                      'allow_rasterization')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/axes/_axes.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/axes/_axes.py'),
                      'Axes')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/axes/_base.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/axes/_base.py'),
                      '_AxesBase')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/backend_bases.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/backend_bases.py'),
                      'button_press_handler')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/colorbar.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [[('function def',
                             loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/colorbar.py'),
                             '_set_ticks_on_axis_warn')]],
        'top-node': [('class def',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/colorbar.py'),
                      'Colorbar')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/colors.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/colors.py'),
                      'BoundaryNorm')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/figure.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/figure.py'),
                      'AxesStack')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/gridspec.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/gridspec.py'),
                      'GridSpec')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/image.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [[('function def',
                             loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/image.py'),
                             '_rgb_to_rgba')]],
        'top-node': [('class def',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/image.py'),
                      'AxesImage')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/patches.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/patches.py'),
                      'Arc')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/pyplot.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/pyplot.py'),
                      'acorr')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/ticker.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/ticker.py'),
                      'AutoLocator')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/transforms.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/transforms.py'),
                      'Affine2D')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/numpy/core/_methods.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [[('function def',
                             loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/numpy/core/_methods.py'),
                             '_var')]],
        'top-node': [('generic attribute',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/numpy/core/_methods.py'),
                      'umr_all')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/numpy/core/fromnumeric.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/numpy/core/fromnumeric.py'),
                      'alen')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/numpy/lib/npyio.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/numpy/lib/npyio.py'),
                      'array_function_dispatch')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/pandas/core/internals/construction.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/pandas/core/internals/construction.py'),
                      'arrays_to_mgr')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/scipy/ndimage/interpolation.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/scipy/ndimage/interpolation.py'),
                      'affine_transform')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/scipy/spatial/_plotutils.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [[('generic attribute',
                             loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/scipy/spatial/_plotutils.py'),
                             '__all__')]],
        'top-node': [('function def',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/scipy/spatial/_plotutils.py'),
                      'convex_hull_plot_2d')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/spacy/util.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/spacy/util.py'),
                      'add_lookups')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/torch/__init__.pyi'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/torch/__init__.pyi'),
                      'abs')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/torch/nn/functional.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/torch/nn/functional.py'),
                      'adaptive_avg_pool1d')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/torch/nn/modules/conv.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [[('class def',
                             loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/torch/nn/modules/conv.py'),
                             '_ConvTransposeNd')]],
        'top-node': [('class def',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/torch/nn/modules/conv.py'),
                      'Conv1d')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/torch/nn/modules/module.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/torch/nn/modules/module.py'),
                      'Module')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/torch/nn/modules/rnn.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/torch/nn/modules/rnn.py'),
                      'apply_permutation')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/torch/nn/modules/sparse.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/torch/nn/modules/sparse.py'),
                      'Embedding')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/torch/optim/sgd.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/torch/optim/sgd.py'),
                      'SGD')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/torch/serialization.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/torch/serialization.py'),
                      'check_module_version_greater_or_equal')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/torch/tensor.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/torch/tensor.py'),
                      'Tensor')]},
        loc('../AppData/Local/Programs/Python/Python38/Lib/traceback.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [[('generic attribute',
                             loc('../AppData/Local/Programs/Python/Python38/Lib/traceback.py'),
                             '__all__')]],
        'top-node': [('function def',
                      loc('../AppData/Local/Programs/Python/Python38/Lib/traceback.py'),
                      'clear_frames')]},
        loc('../AppData/Local/Wing Personal 7/pi-cache/3.8/C/Users/Weka/AppData/Local/Programs/Python/Python38/Lib/site-packages/numpy/core/_multiarray_umath.pi'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../AppData/Local/Wing Personal 7/pi-cache/3.8/C/Users/Weka/AppData/Local/Programs/Python/Python38/Lib/site-packages/numpy/core/_multiarray_umath.pi'),
                      'absolute')]},
        loc('../AppData/Roaming/Python/Python38/site-packages/PIL/ImageFile.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../AppData/Roaming/Python/Python38/site-packages/PIL/ImageFile.py'),
                      'ERRORS')]},
        loc('../AppData/Roaming/Python/Python38/site-packages/matplotlib/image.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../AppData/Roaming/Python/Python38/site-packages/matplotlib/image.py'),
                      'AxesImage')]},
        loc('../ait/ExploreExploit.py'): {'expanded-nodes': [],
        'selected-nodes': [[('generic attribute',
                             loc('../ait/ExploreExploit.py'),
                             'D')]],
        'top-node': [('generic attribute',
                      loc('../ait/ExploreExploit.py'),
                      'A')]},
        loc('../hon/generate.py'): {'expanded-nodes': [],
                                    'selected-nodes': [],
                                    'top-node': None},
        loc('../hon/spike1.py'): {'expanded-nodes': [],
                                  'selected-nodes': [],
                                  'top-node': [('generic attribute',
        loc('../hon/spike1.py'),
        'file')]},
        loc('../hon/visualize.py'): {'expanded-nodes': [],
                                     'selected-nodes': [],
                                     'top-node': [('generic attribute',
        loc('../hon/visualize.py'),
        'axes')]},
        loc('../hpa-scc/CellSegmentatorTest.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../hpa-scc/CellSegmentatorTest.py'),
                      'ax')]},
        loc('../hpa-scc/README.md'): {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': None},
        loc('../hpa-scc/analyze-labels.py'): {'expanded-nodes': [],
        'selected-nodes': [[('generic attribute',
                             loc('../hpa-scc/analyze-labels.py'),
                             'csvfile')]],
        'top-node': [('generic attribute',
                      loc('../hpa-scc/analyze-labels.py'),
                      'args')]},
        loc('../hpa-scc/census.py'): {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': [('generic attribute',
        loc('../hpa-scc/census.py'),
        'axs')]},
        loc('../hpa-scc/dirichlet.py'): {'expanded-nodes': [],
        'selected-nodes': [[('function def',
                             loc('../hpa-scc/dirichlet.py'),
                             'get_dist')]],
        'top-node': [('generic attribute',
                      loc('../hpa-scc/dirichlet.py'),
                      'args')]},
        loc('../hpa-scc/encoder.py'): {'expanded-nodes': [],
                                       'selected-nodes': [None],
                                       'top-node': None},
        loc('../hpa-scc/ex.py'): {'expanded-nodes': [],
                                  'selected-nodes': [],
                                  'top-node': None},
        loc('../hpa-scc/hpascc.py'): {'expanded-nodes': [],
                                      'selected-nodes': [[('function def',
        loc('../hpa-scc/hpascc.py'),
        'read_training_expectations')]],
                                      'top-node': [('generic attribute',
        loc('../hpa-scc/hpascc.py'),
        'BLUE')]},
        loc('../hpa-scc/image_seg.py'): {'expanded-nodes': [],
        'selected-nodes': [[('generic attribute',
                             loc('../hpa-scc/image_seg.py'),
                             'info')]],
        'top-node': [('generic attribute',
                      loc('../hpa-scc/image_seg.py'),
                      'dataset')]},
        loc('../hpa-scc/logs.py'): {'expanded-nodes': [],
                                    'selected-nodes': [[('function def',
        loc('../hpa-scc/logs.py'),
        'expand')]],
                                    'top-node': [('generic attribute',
        loc('../hpa-scc/logs.py'),
        'args')]},
        loc('../hpa-scc/old/README.md'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': None},
        loc('../hpa-scc/old/train2.py'): {'expanded-nodes': [],
        'selected-nodes': [[('function def',
                             loc('../hpa-scc/old/train2.py'),
                             'restart')]],
        'top-node': [('generic attribute',
                      loc('../hpa-scc/old/train2.py'),
                      'args')]},
        loc('../hpa-scc/old/visualize.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': None},
        loc('../hpa-scc/old/vizcnn.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../hpa-scc/old/vizcnn.py'),
                      'args')]},
        loc('../hpa-scc/otsu.py'): {'expanded-nodes': [],
                                    'selected-nodes': [[('function def',
        loc('../hpa-scc/otsu.py'),
        'get_thinned')]],
                                    'top-node': [('generic attribute',
        loc('../hpa-scc/otsu.py'),
        'BLUE')]},
        loc('../hpa-scc/seg.py'): {'expanded-nodes': [],
                                   'selected-nodes': [],
                                   'top-node': [('generic attribute',
        loc('../hpa-scc/seg.py'),
        'cell_mask')]},
        loc('../hpa-scc/segment.py'): {'expanded-nodes': [],
                                       'selected-nodes': [],
                                       'top-node': [('function def',
        loc('../hpa-scc/segment.py'),
        'apply_masks')]},
        loc('../hpa-scc/select_images.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../hpa-scc/select_images.py'),
                      'args')]},
        loc('../hpa-scc/slice.py'): {'expanded-nodes': [],
                                     'selected-nodes': [[('function def',
        loc('../hpa-scc/slice.py'),
        'create_image_target')]],
                                     'top-node': [('generic attribute',
        loc('../hpa-scc/slice.py'),
        'args')]},
        loc('../hpa-scc/slice2.py'): {'expanded-nodes': [],
                                      'selected-nodes': [[('function def',
        loc('../hpa-scc/slice2.py'),
        'create_image_target')]],
                                      'top-node': [('generic attribute',
        loc('../hpa-scc/slice2.py'),
        'args')]},
        loc('../hpa-scc/spike5.py'): {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': [('generic attribute',
        loc('../hpa-scc/spike5.py'),
        'axs')]},
        loc('../hpa-scc/spike6.py'): {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': [('generic attribute',
        loc('../hpa-scc/spike6.py'),
        'axs')]},
        loc('../hpa-scc/spike7.py'): {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': [('generic attribute',
        loc('../hpa-scc/spike7.py'),
        'axs')]},
        loc('../hpa-scc/spike8.py'): {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': [('generic attribute',
        loc('../hpa-scc/spike8.py'),
        'axs')]},
        loc('../hpa-scc/spikes/spike6.py'): {'expanded-nodes': [],
        'selected-nodes': [[('generic attribute',
                             loc('../hpa-scc/spikes/spike6.py'),
                             'nrows')]],
        'top-node': [('generic attribute',
                      loc('../hpa-scc/spikes/spike6.py'),
                      'axs')]},
        loc('../hpa-scc/spikes/spike7.py'): {'expanded-nodes': [],
        'selected-nodes': [[('generic attribute',
                             loc('../hpa-scc/spikes/spike7.py'),
                             'nrows')]],
        'top-node': [('generic attribute',
                      loc('../hpa-scc/spikes/spike7.py'),
                      'axs')]},
        loc('../hpa-scc/spikes/spike8.py'): {'expanded-nodes': [],
        'selected-nodes': [[('generic attribute',
                             loc('../hpa-scc/spikes/spike8.py'),
                             'y0')]],
        'top-node': [('generic attribute',
                      loc('../hpa-scc/spikes/spike8.py'),
                      'axs')]},
        loc('../hpa-scc/spikes/watershed.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../hpa-scc/spikes/watershed.py'),
                      'args')]},
        loc('../hpa-scc/split.py'): {'expanded-nodes': [],
                                     'selected-nodes': [],
                                     'top-node': [('generic attribute',
        loc('../hpa-scc/split.py'),
        'args')]},
        loc('../hpa-scc/submission.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': None},
        loc('../hpa-scc/train.py'): {'expanded-nodes': [[('class def',
        loc('../hpa-scc/train.py'),
        'CellDataset')],
        [('class def',
          loc('../hpa-scc/train.py'),
          'Net')]],
                                     'selected-nodes': [[('class def',
        loc('../hpa-scc/train.py'),
        'Net')]],
                                     'top-node': [('generic attribute',
        loc('../hpa-scc/train.py'),
        'args')]},
        loc('../hpa-scc/train2.py'): {'expanded-nodes': [],
                                      'selected-nodes': [[('function def',
        loc('../hpa-scc/train2.py'),
        'restart')]],
                                      'top-node': [('generic attribute',
        loc('../hpa-scc/train2.py'),
        'args')]},
        loc('../hpa-scc/utils.py'): {'expanded-nodes': [],
                                     'selected-nodes': [],
                                     'top-node': [('function def',
        loc('../hpa-scc/utils.py'),
        'create_xkcd_colours')]},
        loc('../hpa-scc/visualize.py'): {'expanded-nodes': [],
        'selected-nodes': [[('generic attribute',
                             loc('../hpa-scc/visualize.py'),
                             'Training')]],
        'top-node': [('generic attribute',
                      loc('../hpa-scc/visualize.py'),
                      'args')]},
        loc('../hpa-scc/vizcnn.py'): {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': [('generic attribute',
        loc('../hpa-scc/vizcnn.py'),
        'args')]},
        loc('../hpa-scc/worklist.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../hpa-scc/worklist.py'),
                      'args')]},
        loc('README.md'): {'expanded-nodes': [],
                           'selected-nodes': [],
                           'top-node': None},
        loc('nano-corpus.txt'): {'expanded-nodes': [],
                                 'selected-nodes': [],
                                 'top-node': None},
        loc('plot.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('plot.py'),
                                       'args')]},
        loc('rnn.py'): {'expanded-nodes': [[('class def',
        loc('rnn.py'),
        'Alphabet')]],
                        'selected-nodes': [],
                        'top-node': [('generic attribute',
                                      loc('rnn.py'),
                                      'all_losses')]},
        loc('rnn2.py'): {'expanded-nodes': [],
                         'selected-nodes': [[('function def',
        loc('rnn2.py'),
        'randomTrainingExample')]],
                         'top-node': [('generic attribute',
                                       loc('rnn2.py'),
                                       'all_losses')]},
        loc('rnn3.py'): {'expanded-nodes': [],
                         'selected-nodes': [[('class def',
        loc('rnn3.py'),
        'Encoder')]],
                         'top-node': [('generic attribute',
                                       loc('rnn3.py'),
                                       'args')]},
        loc('seq2seq.py'): {'expanded-nodes': [[('class def',
        loc('seq2seq.py'),
        'Decoder')],
        [('class def',
          loc('seq2seq.py'),
          'Language')]],
                            'selected-nodes': [[('function def',
        loc('seq2seq.py'),
        'evaluateAndShowAttention')]],
                            'top-node': [('generic attribute',
        loc('seq2seq.py'),
        'args')]},
        loc('tokenizer.py'): {'expanded-nodes': [],
                              'selected-nodes': [],
                              'top-node': [('function def',
        loc('tokenizer.py'),
        'extract_sentences')]},
        loc('word2vec.py'): {'expanded-nodes': [[('class def',
        loc('word2vec.py'),
        'Word2Vec')]],
                             'selected-nodes': [],
                             'top-node': [('generic attribute',
        loc('word2vec.py'),
        'args')]},
        loc('../../astro/make_img.py'): {'expanded-nodes': [],
        'selected-nodes': [[('function def',
                             loc('../../astro/make_img.py'),
                             'plot')]],
        'top-node': [('generic attribute',
                      loc('../../astro/make_img.py'),
                      'config_path')]},
        loc('../../astro/plot_points.py'): {'expanded-nodes': [],
        'selected-nodes': [[('generic attribute',
                             loc('../../astro/plot_points.py'),
                             'y3s')]],
        'top-node': [('generic attribute',
                      loc('../../astro/plot_points.py'),
                      'i')]},
        loc('../../bioinformatics/DBRU.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../../bioinformatics/DBRU.py'),
                      'a')]},
        loc('../../bioinformatics/GREP.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../bioinformatics/GREP.py'),
                      'count_kmers')]},
        loc('../../bioinformatics/PCOV.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../bioinformatics/PCOV.py'),
                      'pcov')]},
        loc('../../bioinformatics/rosalind.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../bioinformatics/rosalind.py'),
                      'dbru')]},
        loc('../../dynamics/bacteria.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../../dynamics/bacteria.py'),
                      'bacteria')]},
        loc('../../dynamics/barnes_hut.py'): {'expanded-nodes': [],
        'selected-nodes': [[('function def',
                             loc('../../dynamics/barnes_hut.py'),
                             'add')]],
        'top-node': [('function def',
                      loc('../../dynamics/barnes_hut.py'),
                      'add')]},
        loc('../../dynamics/chaos_book/hw1Rossler/README.md'): {'expanded-no'\
        'des': [],
        'selected-nodes': [None],
        'top-node': None},
        loc('../../dynamics/chaos_book/hw1Rossler/RungeKutta.py'): {'expande'\
        'd-nodes': [],
        'selected-nodes': [[('generic attribute',
                             loc('../../dynamics/chaos_book/hw1Rossler/RungeKutta.py'),
                             'xSolution')]],
        'top-node': [('generic attribute',
                      loc('../../dynamics/chaos_book/hw1Rossler/RungeKutta.py'),
                      'Nt')]},
        loc('../../dynamics/lbmFlowAroundCylinder.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../../dynamics/lbmFlowAroundCylinder.py'),
                      'col1')]},
        loc('../../dynamics/lv.py'): {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': None},
        loc('../../dynamics/parityRule.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../../dynamics/parityRule.py'),
                      'i')]},
        loc('../../dynamics/strogatz/README.md'): {'expanded-nodes': [],
        'selected-nodes': [None],
        'top-node': None},
        loc('../../dynamics/strogatz/strogatz_6_1.py'): {'expanded-nodes': [],
        'selected-nodes': [[('generic attribute',
                             loc('../../dynamics/strogatz/strogatz_6_1.py'),
                             '_')]],
        'top-node': [('generic attribute',
                      loc('../../dynamics/strogatz/strogatz_6_1.py'),
                      'eps')]},
        loc('../../dynamics/strogatz_6_1.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../../dynamics/strogatz_6_1.py'),
                      'eps')]},
        loc('../../dynamics/strogatz_6_5_19.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': None},
        loc('../../dynamics/trafficLights.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../../dynamics/trafficLights.py'),
                      'CAR')]},
        loc('unknown:<untitled> #1'): {'expanded-nodes': [],
                                       'selected-nodes': [],
                                       'top-node': None},
        loc('unknown:<untitled> #3'): {'expanded-nodes': [],
                                       'selected-nodes': [],
                                       'top-node': None},
        loc('unknown:<untitled> #2'): {'expanded-nodes': [],
                                       'selected-nodes': [],
                                       'top-node': None}},
                                'browse_mode': u'Current Module',
                                'follow-selection': False,
                                'sort_mode': 'Alphabetically',
                                'visibility_options': {u'Derived Classes': False,
        u'Imported': False,
        u'Modules': True}}),
                              ('indent',
                               'tall',
                               2,
                               {})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [1,
                          0],
        'notebook_display': 'normal',
        'notebook_percent': 0.30000000000000004,
        'override_title': None,
        'pagelist': [('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'Hidden & Temporary Files',
                                  'fLocation': u'..\\..\\..\\Program Files (x86)\\Wing Personal 7.2\\bin\\voro',
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 42,
                                       'fReplaceText': u'',
                                       'fReverse': False,
                                       'fSearchText': u'load_state_dict',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': True,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 40,
                                       'fReplaceText': u'calculate_loss',
                                       'fReverse': False,
                                       'fSearchText': u'step',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': True}}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-io',
                      'wide',
                      1,
                      {}),
                     ('debug-exceptions',
                      'wide',
                      1,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'code-line': '',
                       'first-line': 0L,
                       'folded-linenos': [],
                       'history': {},
                       'launch-id': None,
                       'sel-line': 2L,
                       'sel-line-start': 157L,
                       'selection_end': 157L,
                       'selection_start': 157L,
                       'zoom': 0L}),
                     ('messages',
                      'wide',
                      2,
                      {'current-domain': 0}),
                     ('os-command',
                      'wide',
                      1,
                      {})],
        'primary_view_state': {'editor_states': ('horizontal',
        0.9972027972027973,
        ({'bookmarks': ([[loc('word2vec.py'),
                          {'attrib-starts': [('plot_weights|0|',
        344)],
                           'code-line': '\r\n',
                           'first-line': 348L,
                           'folded-linenos': [],
                           'sel-line': 359L,
                           'sel-line-start': 12524L,
                           'selection_end': 12524L,
                           'selection_start': 12524L,
                           'zoom': 0L},
                          1625613892.802],
                         [loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/artist.py'),
                          {'attrib-starts': [('Artist|0|',
        59),
        ('Artist|0|.update|0|',
         971)],
                           'code-line': '                        raise Attri'\
        'buteError(f"{type(self).__name__!r} object "\r\n',
                           'first-line': 973L,
                           'folded-linenos': [],
                           'sel-line': 995L,
                           'sel-line-start': 33157L,
                           'selection_end': 33157L,
                           'selection_start': 33157L,
                           'zoom': 0L},
                          1625613907.93],
                         [loc('word2vec.py'),
                          {'attrib-starts': [('plot_losses|0|',
        360)],
                           'code-line': "    plot(Epochs,Losses,optimizer={a"\
        "rgs.optimizer},label=f'Decay rate={args.decay}')\r\n",
                           'first-line': 348L,
                           'folded-linenos': [],
                           'sel-line': 362L,
                           'sel-line-start': 12593L,
                           'selection_end': 12593L,
                           'selection_start': 12593L,
                           'zoom': 0L},
                          1625613937.916],
                         [loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/artist.py'),
                          {'attrib-starts': [('Artist|0|',
        59),
        ('Artist|0|.update|0|',
         971)],
                           'code-line': '                        raise Attri'\
        'buteError(f"{type(self).__name__!r} object "\r\n',
                           'first-line': 973L,
                           'folded-linenos': [],
                           'sel-line': 995L,
                           'sel-line-start': 33157L,
                           'selection_end': 33157L,
                           'selection_start': 33157L,
                           'zoom': 0L},
                          1625613939.918],
                         [loc('word2vec.py'),
                          {'attrib-starts': [('StochasticGradient|0|',
        120),
        ('StochasticGradient|0|.train|0|',
         131)],
                           'code-line': '                     learning_rate '\
        '= self.lr)\r\n',
                           'first-line': 122L,
                           'folded-linenos': [],
                           'sel-line': 138L,
                           'sel-line-start': 5473L,
                           'selection_end': 5507L,
                           'selection_start': 5494L,
                           'zoom': 0L},
                          1625621147.519],
                         [loc('word2vec.py'),
                          {'attrib-starts': [('GradientDescent|0|',
        80),
        ('GradientDescent|0|.train|0|',
         108)],
                           'code-line': '        lr = self.lr/(1+self.decay '\
        '* epoch)\r\n',
                           'first-line': 106L,
                           'folded-linenos': [],
                           'sel-line': 111L,
                           'sel-line-start': 4528L,
                           'selection_end': 4538L,
                           'selection_start': 4536L,
                           'zoom': 0L},
                          1625621159.695],
                         [loc('word2vec.py'),
                          {'attrib-starts': [('GradientDescent|0|',
        80),
        ('GradientDescent|0|.train|0|',
         108)],
                           'code-line': '                         lr = self.'\
        'lr)\r\n',
                           'first-line': 106L,
                           'folded-linenos': [],
                           'sel-line': 117L,
                           'sel-line-start': 4765L,
                           'selection_end': 4792L,
                           'selection_start': 4790L,
                           'zoom': 0L},
                          1625621161.41],
                         [loc('word2vec.py'),
                          {'attrib-starts': [('StochasticGradient|0|',
        120),
        ('StochasticGradient|0|.train|0|',
         131)],
                           'code-line': '        lr = self.lr/(1+self.decay '\
        '* epoch)\r\n',
                           'first-line': 114L,
                           'folded-linenos': [],
                           'sel-line': 133L,
                           'sel-line-start': 5187L,
                           'selection_end': 5197L,
                           'selection_start': 5195L,
                           'zoom': 0L},
                          1625621163.681],
                         [loc('word2vec.py'),
                          {'attrib-starts': [('StochasticGradient|0|',
        120),
        ('StochasticGradient|0|.train|0|',
         131)],
                           'code-line': '                     lr = self.lr)'\
        '\r\n',
                           'first-line': 126L,
                           'folded-linenos': [],
                           'sel-line': 138L,
                           'sel-line-start': 5440L,
                           'selection_end': 5463L,
                           'selection_start': 5461L,
                           'zoom': 0L},
                          1625621165.043],
                         [loc('word2vec.py'),
                          {'attrib-starts': [('Word2Vec|0|',
        40),
        ('Word2Vec|0|.update|0|',
         60)],
                           'code-line': '             lr = 0.001):\r\n',
                           'first-line': 57L,
                           'folded-linenos': [],
                           'sel-line': 62L,
                           'sel-line-start': 3034L,
                           'selection_end': 3049L,
                           'selection_start': 3047L,
                           'zoom': 0L},
                          1625621166.501],
                         [loc('word2vec.py'),
                          {'attrib-starts': [('Word2Vec|0|',
        40),
        ('Word2Vec|0|.update|0|',
         60)],
                           'code-line': '        self.Delta1   = alpha * sel'\
        'f.Delta1 - lr * self.W1.grad.data\r\n',
                           'first-line': 57L,
                           'folded-linenos': [],
                           'sel-line': 63L,
                           'sel-line-start': 3061L,
                           'selection_end': 3109L,
                           'selection_start': 3107L,
                           'zoom': 0L},
                          1625621168.792],
                         [loc('word2vec.py'),
                          {'attrib-starts': [('Word2Vec|0|',
        40),
        ('Word2Vec|0|.update|0|',
         60)],
                           'code-line': '        self.Delta2   = alpha * sel'\
        'f.Delta2 - lr * self.W2.grad.data\r\n',
                           'first-line': 57L,
                           'folded-linenos': [],
                           'sel-line': 64L,
                           'sel-line-start': 3131L,
                           'selection_end': 3179L,
                           'selection_start': 3179L,
                           'zoom': 0L},
                          1625621169.561],
                         [loc('word2vec.py'),
                          {'attrib-starts': [('train|0|',
        262)],
                           'code-line': '    optimizer = create_optimizer(op'\
        'timizer_name,\r\n',
                           'first-line': 269L,
                           'folded-linenos': [],
                           'sel-line': 280L,
                           'sel-line-start': 10097L,
                           'selection_end': 10129L,
                           'selection_start': 10113L,
                           'zoom': 0L},
                          1625622003.776],
                         [loc('word2vec.py'),
                          {'attrib-starts': [('create_optimizer|0|',
        241)],
                           'code-line': '        return GradientDescent(lr  '\
        '  = lr,\r\n',
                           'first-line': 235L,
                           'folded-linenos': [],
                           'sel-line': 248L,
                           'sel-line-start': 9066L,
                           'selection_end': 9096L,
                           'selection_start': 9081L,
                           'zoom': 0L},
                          1625622050.458],
                         [loc('word2vec.py'),
                          {'attrib-starts': [('Word2Vec|0|',
        44)],
                           'code-line': '    # step\r\n',
                           'first-line': 44L,
                           'folded-linenos': [],
                           'sel-line': 56L,
                           'sel-line-start': 2609L,
                           'selection_end': 2619L,
                           'selection_start': 2615L,
                           'zoom': 0L},
                          1625709963.399],
                         [loc('word2vec.py'),
                          {'attrib-starts': [('Word2Vec|0|',
        44),
        ('Word2Vec|0|.step|0|',
         57)],
                           'code-line': '    def step(self,word_index,target'\
        '):\r\n',
                           'first-line': 44L,
                           'folded-linenos': [],
                           'sel-line': 57L,
                           'sel-line-start': 2621L,
                           'selection_end': 2633L,
                           'selection_start': 2629L,
                           'zoom': 0L},
                          1625709967.817],
                         [loc('word2vec.py'),
                          {'attrib-starts': [('Word2Vec|0|',
        44)],
                           'code-line': '    # calculate_loss\r\n',
                           'first-line': 44L,
                           'folded-linenos': [],
                           'sel-line': 56L,
                           'sel-line-start': 2609L,
                           'selection_end': 2629L,
                           'selection_start': 2615L,
                           'zoom': 0L},
                          1625710011.272],
                         [loc('word2vec.py'),
                          {'attrib-starts': [('Word2Vec|0|',
        44),
        ('Word2Vec|0|.calculate_loss|0|',
         57)],
                           'code-line': '    def calculate_loss(self,word_in'\
        'dex,target):\r\n',
                           'first-line': 44L,
                           'folded-linenos': [],
                           'sel-line': 57L,
                           'sel-line-start': 2631L,
                           'selection_end': 2653L,
                           'selection_start': 2639L,
                           'zoom': 0L},
                          1625710012.353],
                         [loc('word2vec.py'),
                          {'attrib-starts': [('GradientDescent|0|',
        93),
        ('GradientDescent|0|.train|0|',
         121)],
                           'code-line': '            loss_val += model.calcu'\
        'late_loss(word_index,target)\r\n',
                           'first-line': 108L,
                           'folded-linenos': [],
                           'sel-line': 127L,
                           'sel-line-start': 4878L,
                           'selection_end': 4922L,
                           'selection_start': 4908L,
                           'zoom': 0L},
                          1625710015.755],
                         [loc('word2vec.py'),
                          {'attrib-starts': [('StochasticGradient|0|',
        137),
        ('StochasticGradient|0|.train|0|',
         148)],
                           'code-line': '            loss_val += model.calcu'\
        'late_loss(word_index,target)\r\n',
                           'first-line': 135L,
                           'folded-linenos': [],
                           'sel-line': 154L,
                           'sel-line-start': 5659L,
                           'selection_end': 5703L,
                           'selection_start': 5703L,
                           'zoom': 0L},
                          1625710018.437]],
                        20),
          'current-loc': loc('word2vec.py'),
          'editor-state-list': [(loc('nano-corpus.txt'),
                                 {'attrib-starts': [],
                                  'code-line': 'paris is france capital.\r\n',
                                  'first-line': 0L,
                                  'folded-linenos': [],
                                  'sel-line': 6L,
                                  'sel-line-start': 118L,
                                  'selection_end': 118L,
                                  'selection_start': 118L,
                                  'zoom': 0L}),
                                (loc('seq2seq.py'),
                                 {'attrib-starts': [],
                                  'code-line': '# load_model\r\n',
                                  'first-line': 473L,
                                  'folded-linenos': [],
                                  'sel-line': 477L,
                                  'sel-line-start': 18959L,
                                  'selection_end': 18965L,
                                  'selection_start': 18961L,
                                  'zoom': 0L}),
                                (loc('word2vec.py'),
                                 {'attrib-starts': [('Word2Vec|0|',
        44)],
                                  'code-line': '    #\r\n',
                                  'first-line': 105L,
                                  'folded-linenos': [],
                                  'sel-line': 98L,
                                  'sel-line-start': 4000L,
                                  'selection_end': 4005L,
                                  'selection_start': 4005L,
                                  'zoom': 0L})],
          'has-focus': True,
          'locked': False},
         [loc('nano-corpus.txt'),
          loc('seq2seq.py'),
          loc('word2vec.py')]),
        ({'bookmarks': ([[loc('README.md'),
                          {'attrib-starts': [],
                           'code-line': '# NLP\r\n',
                           'first-line': 0L,
                           'folded-linenos': [],
                           'sel-line': 0L,
                           'sel-line-start': 0L,
                           'selection_end': 0L,
                           'selection_start': 0L,
                           'zoom': 0L},
                          1623725811.389],
                         [loc('../../../Program Files (x86)/Wing Personal 7.2/resources/builtin-pi-files/__os__/win32/3.8/re.pi'),
                          {'attrib-starts': [],
                           'code-line': '# coding: utf-8\n',
                           'first-line': 0L,
                           'folded-linenos': [],
                           'sel-line': 0L,
                           'sel-line-start': 0L,
                           'selection_end': 0L,
                           'selection_start': 0L,
                           'zoom': 0L},
                          1623725812.743],
                         [loc('word2vec.py'),
                          {'attrib-starts': [],
                           'code-line': '#    Copyright (C) 2021 Simon A. Cr'\
        'ase\r\n',
                           'first-line': 0L,
                           'folded-linenos': [],
                           'sel-line': 0L,
                           'sel-line-start': 0L,
                           'selection_end': 0L,
                           'selection_start': 0L,
                           'zoom': 0L},
                          1624157583.514],
                         [loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/axes/_base.py'),
                          {'attrib-starts': [],
                           'code-line': 'from collections import OrderedDict'\
        '\r\n',
                           'first-line': 0L,
                           'folded-linenos': [],
                           'sel-line': 0L,
                           'sel-line-start': 0L,
                           'selection_end': 0L,
                           'selection_start': 0L,
                           'zoom': 0L},
                          1624157584.362],
                         [loc('rnn.py'),
                          {'attrib-starts': [],
                           'code-line': 'from __future__ import unicode_lite'\
        'rals, print_function, division\r\n',
                           'first-line': 0L,
                           'folded-linenos': [],
                           'sel-line': 0L,
                           'sel-line-start': 0L,
                           'selection_end': 0L,
                           'selection_start': 0L,
                           'zoom': 0L},
                          1624505923.792],
                         [loc('rnn.py'),
                          {'attrib-starts': [],
                           'code-line': '# https://pytorch.org/tutorials/int'\
        'ermediate/char_rnn_classification_tutorial.html\r\n',
                           'first-line': 0L,
                           'folded-linenos': [],
                           'sel-line': 0L,
                           'sel-line-start': 0L,
                           'selection_end': 0L,
                           'selection_start': 0L,
                           'zoom': 0L},
                          1624648684.065],
                         [loc('rnn.py'),
                          {'attrib-starts': [],
                           'code-line': "# Sean Robertsons's NLP demo: Class"\
        "ifying Names with a Character-Level RNN\r\n",
                           'first-line': 0L,
                           'folded-linenos': [],
                           'sel-line': 0L,
                           'sel-line-start': 0L,
                           'selection_end': 0L,
                           'selection_start': 0L,
                           'zoom': 0L},
                          1624735011.651],
                         [loc('rnn3.py'),
                          {'attrib-starts': [],
                           'code-line': 'from __future__          import uni'\
        'code_literals, print_function, division\r\n',
                           'first-line': 0L,
                           'folded-linenos': [],
                           'sel-line': 4L,
                           'sel-line-start': 210L,
                           'selection_end': 210L,
                           'selection_start': 210L,
                           'zoom': 0L},
                          1624924668.368],
                         [loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/torch/nn/modules/module.py'),
                          {'attrib-starts': [('Module|0|',
        31)],
                           'code-line': 'class Module(object):\r\n',
                           'first-line': 125L,
                           'folded-linenos': [],
                           'sel-line': 31L,
                           'sel-line-start': 813L,
                           'selection_end': 825L,
                           'selection_start': 819L,
                           'zoom': 0L},
                          1624924669.079],
                         [loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/torch/optim/sgd.py'),
                          {'attrib-starts': [],
                           'code-line': 'import torch\r\n',
                           'first-line': 0L,
                           'folded-linenos': [],
                           'sel-line': 0L,
                           'sel-line-start': 0L,
                           'selection_end': 0L,
                           'selection_start': 0L,
                           'zoom': 0L},
                          1624924669.754],
                         [loc('word2vec.py'),
                          {'attrib-starts': [],
                           'code-line': '#    Copyright (C) 2021 Simon A. Cr'\
        'ase\r\n',
                           'first-line': 0L,
                           'folded-linenos': [],
                           'sel-line': 0L,
                           'sel-line-start': 0L,
                           'selection_end': 0L,
                           'selection_start': 0L,
                           'zoom': 0L},
                          1624924670.55],
                         [loc('rnn2.py'),
                          {'attrib-starts': [],
                           'code-line': "# Sean Robertsons's NLP demo: Gener"\
        "ating Names with a Character-Level RNN\r\n",
                           'first-line': 0L,
                           'folded-linenos': [],
                           'sel-line': 0L,
                           'sel-line-start': 0L,
                           'selection_end': 0L,
                           'selection_start': 0L,
                           'zoom': 0L},
                          1624924671.384],
                         [loc('README.md'),
                          {'attrib-starts': [],
                           'code-line': '# NLP\r\n',
                           'first-line': 0L,
                           'folded-linenos': [],
                           'sel-line': 0L,
                           'sel-line-start': 0L,
                           'selection_end': 0L,
                           'selection_start': 0L,
                           'zoom': 0L},
                          1624924672.563],
                         [loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/PIL/Image.py'),
                          {'attrib-starts': [],
                           'code-line': '#\n',
                           'first-line': 0L,
                           'folded-linenos': [],
                           'sel-line': 0L,
                           'sel-line-start': 0L,
                           'selection_end': 0L,
                           'selection_start': 0L,
                           'zoom': 0L},
                          1624924674.504],
                         [loc('seq2seq.py'),
                          {'attrib-starts': [],
                           'code-line': "# This code has been adapted from S"\
        "ean Robertsons's NLP demo:\r\n",
                           'first-line': 0L,
                           'folded-linenos': [],
                           'sel-line': 0L,
                           'sel-line-start': 0L,
                           'selection_end': 0L,
                           'selection_start': 0L,
                           'zoom': 0L},
                          1625295642.104],
                         [loc('rnn2.py'),
                          {'attrib-starts': [],
                           'code-line': "# Sean Robertsons's NLP demo: Gener"\
        "ating Names with a Character-Level RNN\r\n",
                           'first-line': 0L,
                           'folded-linenos': [],
                           'sel-line': 0L,
                           'sel-line-start': 0L,
                           'selection_end': 0L,
                           'selection_start': 0L,
                           'zoom': 0L},
                          1625295643.447],
                         [loc('rnn.py'),
                          {'attrib-starts': [],
                           'code-line': "# Sean Robertsons's NLP demo: Class"\
        "ifying Names with a Character-Level RNN\r\n",
                           'first-line': 0L,
                           'folded-linenos': [],
                           'sel-line': 0L,
                           'sel-line-start': 0L,
                           'selection_end': 0L,
                           'selection_start': 0L,
                           'zoom': 0L},
                          1625295644.454],
                         [loc('README.md'),
                          {'attrib-starts': [],
                           'code-line': '# NLP\r\n',
                           'first-line': 0L,
                           'folded-linenos': [],
                           'sel-line': 0L,
                           'sel-line-start': 0L,
                           'selection_end': 0L,
                           'selection_start': 0L,
                           'zoom': 0L},
                          1625295645.348],
                         [loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/torch/nn/modules/module.py'),
                          {'attrib-starts': [('Module|0|',
        31),
        ('Module|0|.__call__|0|',
         539)],
                           'code-line': '        for hook in self._forward_p'\
        're_hooks.values():\r\n',
                           'first-line': 527L,
                           'folded-linenos': [],
                           'sel-line': 540L,
                           'sel-line-start': 21983L,
                           'selection_end': 21983L,
                           'selection_start': 21983L,
                           'zoom': 0L},
                          1625295646.378],
                         [loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/torch/nn/functional.py'),
                          {'attrib-starts': [('nll_loss|0|',
        2054)],
                           'code-line': "        raise ValueError('Expected "\
        "input batch_size ({}) to match target batch_size ({}).'\r\n",
                           'first-line': 2092L,
                           'folded-linenos': [],
                           'sel-line': 2111L,
                           'sel-line-start': 93681L,
                           'selection_end': 93681L,
                           'selection_start': 93681L,
                           'zoom': 0L},
                          1625295647.342]],
                        20),
          'current-loc': loc('word2vec.py'),
          'editor-state-list': [(loc('nano-corpus.txt'),
                                 {}),
                                (loc('seq2seq.py'),
                                 {'attrib-starts': [],
                                  'code-line': "# This code has been adapted"\
        " from Sean Robertsons's NLP demo:\r\n",
                                  'first-line': 0L,
                                  'folded-linenos': [],
                                  'sel-line': 0L,
                                  'sel-line-start': 0L,
                                  'selection_end': 0L,
                                  'selection_start': 0L,
                                  'zoom': 0L}),
                                (loc('word2vec.py'),
                                 {'attrib-starts': [],
                                  'code-line': '#    Copyright (C) 2021 Simo'\
        'n A. Crase\r\n',
                                  'first-line': 0L,
                                  'folded-linenos': [],
                                  'sel-line': 0L,
                                  'sel-line-start': 0L,
                                  'selection_end': 0L,
                                  'selection_start': 0L,
                                  'zoom': 0L})],
          'has-focus': False,
          'locked': False},
         [loc('nano-corpus.txt'),
          loc('seq2seq.py'),
          loc('word2vec.py')])),
                               'open_files': [u'seq2seq.py',
        u'nano-corpus.txt',
        u'word2vec.py']},
        'saved_notebook_display': None,
        'split_percents': {0: 0.5},
        'splits': 2,
        'tab_location': 'top',
        'traversal_pos': ((0,
                           1),
                          1625709963.133),
        'user_data': {}},
                 'saved_notebook_display': None,
                 'split_percents': {},
                 'splits': 1,
                 'tab_location': 'left',
                 'traversal_pos': ((0,
                                    2),
                                   1625613904.537),
                 'user_data': {}},
        'window-alloc': (219,
                         0,
                         1702,
                         912)}]}
guimgr.recent-documents = [loc('word2vec.py'),
                           loc('nano-corpus.txt'),
                           loc('seq2seq.py')]
guimgr.visual-state = {loc('../../../Program Files (x86)/Wing Personal 7.2/resources/builtin-pi-files/__os__/win32/3.8/re.pi'): {'a'\
        'ttrib-starts': [],
        'code-line': '# coding: utf-8\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../../../Program Files (x86)/Wing Personal 7.2/resources/builtin-pi-files/__os__/win32/3.8/unicodedata.pi'): {'a'\
        'ttrib-starts': [('category|0|',
                          117)],
        'code-line': 'def category(chr):\n',
        'first-line': 103L,
        'folded-linenos': [],
        'sel-line': 117L,
        'sel-line-start': 3923L,
        'selection_end': 3935L,
        'selection_start': 3927L,
        'zoom': 0L},
                       loc('../../../Program Files (x86)/Wing Personal 7.2/resources/typeshed/stdlib/3/os/__init__.pyi'): {'a'\
        'ttrib-starts': [('remove|1|',
                          439)],
        'code-line': '    def remove(path: _PathType) -> None: ...\n',
        'first-line': 425L,
        'folded-linenos': [],
        'sel-line': 439L,
        'sel-line-start': 16110L,
        'selection_end': 16124L,
        'selection_start': 16118L,
        'zoom': 0L},
                       loc('../AppData/Local/Programs/Python/Python38/Lib/encodings/cp1252.py'): {'a'\
        'ttrib-starts': [('IncrementalDecoder|0|',
                          20),
                         ('IncrementalDecoder|0|.decode|0|',
                          21)],
        'code-line': '        return codecs.charmap_decode(input,self.errors'\
                     ',decoding_table)[0]\r\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 22L,
        'sel-line-start': 696L,
        'selection_end': 696L,
        'selection_start': 696L,
        'zoom': 0L},
                       loc('../AppData/Local/Programs/Python/Python38/Lib/random.py'): {'a'\
        'ttrib-starts': [('Random|0|',
                          77),
                         ('Random|0|.sample|0|',
                          314)],
        'code-line': '            raise TypeError("Population must be a sequ'\
                     'ence or set.  For dicts, use list(d).")\r\n',
        'first-line': 336L,
        'folded-linenos': [],
        'sel-line': 358L,
        'sel-line-start': 13571L,
        'selection_end': 13571L,
        'selection_start': 13571L,
        'zoom': 0L},
                       loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/PIL/Image.py'): {'a'\
        'ttrib-starts': [],
        'code-line': '#\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/artist.py'): {'a'\
        'ttrib-starts': [('Artist|0|',
                          59),
                         ('Artist|0|.update|0|',
                          971)],
        'code-line': '                        raise AttributeError(f"{type(s'\
                     'elf).__name__!r} object "\r\n',
        'first-line': 973L,
        'folded-linenos': [],
        'sel-line': 995L,
        'sel-line-start': 33157L,
        'selection_end': 33157L,
        'selection_start': 33157L,
        'zoom': 0L},
                       loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/axes/_axes.py'): {'a'\
        'ttrib-starts': [('Axes|0|',
                          70),
                         ('Axes|0|.hist|0|',
                          6367)],
        'code-line': "                raise ValueError(f\"The 'color' keywor"\
                     "d argument must have one \"\r\n",
        'first-line': 6589L,
        'folded-linenos': [],
        'sel-line': 6611L,
        'sel-line-start': 265728L,
        'selection_end': 265728L,
        'selection_start': 265728L,
        'zoom': 0L},
                       loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/axes/_base.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'from collections import OrderedDict\r\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/matplotlib/ticker.py'): {'a'\
        'ttrib-starts': [('MaxNLocator|0|',
                          2083)],
        'code-line': 'class MaxNLocator(Locator):\r\n',
        'first-line': 2084L,
        'folded-linenos': [],
        'sel-line': 2083L,
        'sel-line-start': 72801L,
        'selection_end': 72818L,
        'selection_start': 72807L,
        'zoom': 0L},
                       loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/spacy/util.py'): {'a'\
        'ttrib-starts': [('load_model|0|',
                          300)],
        'code-line': '    raise IOError(Errors.E050.format(name=name))\r\n',
        'first-line': 308L,
        'folded-linenos': [],
        'sel-line': 330L,
        'sel-line-start': 12888L,
        'selection_end': 12888L,
        'selection_start': 12888L,
        'zoom': 0L},
                       loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/torch/__init__.pyi'): {'a'\
        'ttrib-starts': [('randn|7|',
                          1675)],
        'code-line': 'def randn(*size: _int, generator: Generator, names: Op'\
                     'tional[List[Union[str, None]]], out: Optional[Tensor]='\
                     'None, dtype: _dtype=None, layout: _layout=strided, dev'\
                     'ice: Union[_device, str, None]=None, requires_grad:_bo'\
                     'ol=False) -> Tensor: ...\r\n',
        'first-line': 1661L,
        'folded-linenos': [],
        'sel-line': 1675L,
        'sel-line-start': 107997L,
        'selection_end': 108006L,
        'selection_start': 108001L,
        'zoom': 0L},
                       loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/torch/autograd/__init__.py'): {'a'\
        'ttrib-starts': [('backward|0|',
                          44)],
        'code-line': '    Variable._execution_engine.run_backward(\r\n',
        'first-line': 84L,
        'folded-linenos': [],
        'sel-line': 97L,
        'sel-line-start': 4634L,
        'selection_end': 4634L,
        'selection_start': 4634L,
        'zoom': 0L},
                       loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/torch/nn/functional.py'): {'a'\
        'ttrib-starts': [('nll_loss|0|',
                          2054)],
        'code-line': 'def nll_loss(input, target, weight=None, size_average='\
                     'None, ignore_index=-100,\r\n',
        'first-line': 2040L,
        'folded-linenos': [],
        'sel-line': 2054L,
        'sel-line-start': 90187L,
        'selection_end': 90199L,
        'selection_start': 90191L,
        'zoom': 0L},
                       loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/torch/nn/modules/module.py'): {'a'\
        'ttrib-starts': [('Module|0|',
                          31),
                         ('Module|0|.__getattr__|0|',
                          65)],
        'code-line': "        raise AttributeError(\"'{}' object has no attr"\
                     "ibute '{}'\".format(\r\n",
        'first-line': 570L,
        'folded-linenos': [],
        'sel-line': 592L,
        'sel-line-start': 24265L,
        'selection_end': 24265L,
        'selection_start': 24265L,
        'zoom': 0L},
                       loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/torch/nn/modules/rnn.py'): {'a'\
        'ttrib-starts': [('GRU|0|',
                          583)],
        'code-line': 'class GRU(RNNBase):\r\n',
        'first-line': 569L,
        'folded-linenos': [],
        'sel-line': 583L,
        'sel-line-start': 28183L,
        'selection_end': 28192L,
        'selection_start': 28189L,
        'zoom': 0L},
                       loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/torch/nn/modules/sparse.py'): {'a'\
        'ttrib-starts': [('Embedding|0|',
                          8)],
        'code-line': 'class Embedding(Module):\r\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 8L,
        'sel-line-start': 143L,
        'selection_end': 158L,
        'selection_start': 149L,
        'zoom': 0L},
                       loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/torch/optim/sgd.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'import torch\r\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/torch/serialization.py'): {'a'\
        'ttrib-starts': [('_open_file|0|',
                          212),
                         ('_open_file|0|.__init__|0|',
                          213)],
        'code-line': '        super(_open_file, self).__init__(open(name, mo'\
                     'de))\r\n',
        'first-line': 209L,
        'folded-linenos': [],
        'sel-line': 214L,
        'sel-line-start': 6838L,
        'selection_end': 6838L,
        'selection_start': 6838L,
        'zoom': 0L},
                       loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/torch/tensor.py'): {'a'\
        'ttrib-starts': [('Tensor|0|',
                          40),
                         ('Tensor|0|.__array__|0|',
                          489)],
        'code-line': '            return self.numpy()\r\n',
        'first-line': 486L,
        'folded-linenos': [],
        'sel-line': 491L,
        'sel-line-start': 20975L,
        'selection_end': 20975L,
        'selection_start': 20975L,
        'zoom': 0L},
                       loc('../AppData/Local/Programs/Python/Python38/Lib/string.py'): {'a'\
        'ttrib-starts': [],
        'code-line': 'ascii_letters = ascii_lowercase + ascii_uppercase\r\n',
        'first-line': 12L,
        'folded-linenos': [],
        'sel-line': 26L,
        'sel-line-start': 1053L,
        'selection_end': 1066L,
        'selection_start': 1053L,
        'zoom': 0L},
                       loc('64317-0.txt'): {'attrib-starts': [],
        'code-line': 'The Project Gutenberg eBook of The Great Gatsby, by F.'\
                     ' Scott Fitzgerald\r\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('README.md'): {'attrib-starts': [],
        'code-line': '# NLP\r\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('bt.py'): {'attrib-starts': [],
                                      'code-line': '            break\r\n',
                                      'first-line': 84L,
                                      'folded-linenos': [],
                                      'sel-line': 104L,
                                      'sel-line-start': 3188L,
                                      'selection_end': 3205L,
                                      'selection_start': 3205L,
                                      'zoom': 0L},
                       loc('chapter1.txt'): {'attrib-starts': [],
        'code-line': 'In my younger and more vulnerable years my father gave'\
                     ' me some advice\r\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('nano-corpus.txt'): {'attrib-starts': [],
        'code-line': 'He is a king.\r\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('plot.py'): {'attrib-starts': [],
        'code-line': '#    Copyright (C) 2021 Simon A. Crase\r\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('rnn.py'): {'attrib-starts': [],
                                       'code-line': "# Sean Robertsons's NLP"\
        " demo: Classifying Names with a Character-Level RNN\r\n",
                                       'first-line': 0L,
                                       'folded-linenos': [],
                                       'sel-line': 0L,
                                       'sel-line-start': 0L,
                                       'selection_end': 0L,
                                       'selection_start': 0L,
                                       'zoom': 0L},
                       loc('rnn2.py'): {'attrib-starts': [],
        'code-line': "# Sean Robertsons's NLP demo: Generating Names with a "\
                     "Character-Level RNN\r\n",
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('spacy-vectors.py'): {'attrib-starts': [],
        'code-line': '',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('tokenizer.py'): {'attrib-starts': [('read_text|0'\
        '|',
        21)],
        'code-line': '        with open(file_name) as text_file:\r\n',
        'first-line': 9L,
        'folded-linenos': [],
        'sel-line': 23L,
        'sel-line-start': 880L,
        'selection_end': 880L,
        'selection_start': 880L,
        'zoom': 0L}}
proj.build-cmd = {None: ('default',
                         None)}
proj.env-vars = {None: ('default',
                        [u''])}
proj.pyexec = {None: ('custom',
                      u'/Users/Weka/AppData/Local/Programs/Python/Python38/python')}
search.replace-history = [u'calculate_loss',
                          u'lr',
                          u"'",
                          u'get_samples',
                          u'step',
                          u'input_language',
                          u'output_language',
                          u'i',
                          u'Losses',
                          u'average_losses',
                          u'average_losss',
                          u'plotLosses',
                          u'get_n()',
                          u'train',
                          u'N',
                          u'Language.EOS_token',
                          u'Language.SOS_token',
                          u'N_HIDDEN',
                          u'N_CONFUSION',
                          u'PLOT_FREQUENCY']
search.search-history = [u'step',
                         u'learning_rate',
                         u'[',
                         u'load_state',
                         u'load_state_dict',
                         u'load_state_',
                         u'create_1hot_vector',
                         u'.to',
                         u'to(',
                         u'to()',
                         u'device',
                         u'\u201d',
                         u'\u201c',
                         u'"',
                         u'samples',
                         u'train',
                         u'input_lang',
                         u'output_lang',
                         u'di',
                         u'index2word']
